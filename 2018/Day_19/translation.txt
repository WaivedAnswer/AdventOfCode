zero = 0
one = 0
two = 0
three = 0
four = 0
five = 0

could this process improve with an interpreter pattern + regex/replace?

one += 16
two = one
three = one
four = two * three
four = 

0  addi 1 16 1 -> one = one + 16
1  seti 1 4 2  -> two = 1
2  seti 1 0 3  -> three = 1
3  mulr 2 3 4  -> four = two * three
4  eqrr 4 5 4  -> four = four == five
5  addr 4 1 1  -> one = four + one
6  addi 1 1 1  -> one = one + 1
7  addr 2 0 0  -> zero = two + zero
8  addi 3 1 3  -> three = three + 1
9  gtrr 3 5 4  -> four = three > five
10 addr 1 4 1  -> one = one + four
11 seti 2 4 1  -> one = 2
12 addi 2 1 2  -> two = two + 1
13 gtrr 2 5 4  -> four = two > five
14 addr 4 1 1  -> one = four + one
15 seti 1 1 1  -> one = 1
16 mulr 1 1 1  -> one = one * one
17 addi 5 2 5  -> five = five + 2
18 mulr 5 5 5  -> five = five * five
19 mulr 1 5 5  -> five = one * five
20 muli 5 11 5 -> five = five * 11
21 addi 4 2 4  -> four = four + 2
22 mulr 4 1 4  -> four = four * one
23 addi 4 16 4 -> four = four + 16
24 addr 5 4 5  -> five = five + four
25 addr 1 0 1  -> one = one + zero
26 seti 0 7 1  -> one = 0
27 setr 1 5 4  -> four = one
28 mulr 4 1 4  -> four = four * one
29 addr 1 4 4  -> four = one + four
30 mulr 1 4 4  -> four = one * four
31 muli 4 14 4 -> four = four * 14
32 mulr 4 1 4  -> four = four * one
33 addr 5 4 5  -> five = five + four
34 seti 0 9 0  -> zero = 0
35 seti 0 4 1  -> one = 0

