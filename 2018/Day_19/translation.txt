zero = 0
one = 0
two = 0
three = 0
four = 0
five = 0

could this process improve with an interpreter pattern + regex/replace?

one += 16
two = one
three = one
four = two * three
four = 

addi 1 16 1 -> one = one + 16
seti 1 4 2  -> two = one
seti 1 0 3  -> three = one
mulr 2 3 4  -> four = two * three
eqrr 4 5 4  -> four = four == five
addr 4 1 1  -> one = four + one
addi 1 1 1  -> one = one + 1
addr 2 0 0  -> zero = two + zero
addi 3 1 3  -> three = three + 1
gtrr 3 5 4  -> four = three > five
addr 1 4 1  -> one = one + four
seti 2 4 1  -> one = two + 4
addi 2 1 2  -> two = two + 1
gtrr 2 5 4  -> four = two > 5
addr 4 1 1  -> one = four + one
seti 1 1 1  -> one = one
mulr 1 1 1  -> one = one * one
addi 5 2 5  -> five = five + 2
mulr 5 5 5  -> five = five * five
mulr 1 5 5  -> five = one * five
muli 5 11 5 -> five = five * 11
addi 4 2 4  -> four = four + 2
mulr 4 1 4  -> four = four * one
addi 4 16 4 -> four = four + 16
addr 5 4 5  -> five = five * four
addr 1 0 1  -> one = one + zero
seti 0 7 1  -> one = 0
setr 1 5 4  -> four = one
mulr 4 1 4  -> four = four * one
addr 1 4 4  -> four = one + four
mulr 1 4 4  -> four = one * four
muli 4 14 4 -> four = four * 14
mulr 4 1 4  -> four = four * one
addr 5 4 5  -> five = five * four
seti 0 9 0  -> zero = 0
seti 0 4 1  -> one = zero

